#!/usr/bin/perl


#####
#
# Description:
# ============
#
# This is SNMP extension agent is providing CPU information.
#
#####
#
# Created by: <jiri(dot)tyr(at)gmail(dot)com>
#
#####


use strict;
use warnings;
use Getopt::Long;
use Time::Local;
use NetSNMP::agent (':all');
use NetSNMP::ASN qw(ASN_INTEGER);


# Flush output immidiately
$| = 1;


# File with default values
my $defaults_file = $ENV{'DEFAULT_FILE'} || '/etc/extagent/default/extagent-cpu-summary.conf';
# Read default values from file
my %CFG = &readDefaults();


# Debug variable
my $DEBUG = $CFG{'DEBUG'} || 0;
# To show help
my $help = 0;

# Read the command line options
GetOptions (
	'e|debug'	=> \$DEBUG,
	'h|help'	=> \$help
);

# Verify input params
if ($help == 1) {
	&help();
	exit 0;
}


# Data structure where the data are saved
my %cpus;
# Detect virtualization
my $virtual = 0;
# Timestamp of the last log parsing
my $prev_timestamp = 0;
# Maximum time between the collections in seconds (4 minutes)
my $max_time = $ENV{'MAX_TIME'} || $CFG{'MAX_TIME'} || 240;
# Random sleep at the start of the script
my $sleep = int rand($ENV{'EXTAGENT_SLEEP'} || $CFG{'SLEEP'} || 0);
# Name of the agent
my $NAME = $CFG{'NAME'} || 'cpu_summary';
# OID of the agent
my $OID = $CFG{'OID'} ||
          '1.3.6.1.4.1.8072.9999.9999.6.1';
#                      |    |    |    | |
#                      |    |    |    | |
#                      |    |    |    | +------- summary
#                      |    |    |    +--------- CPU
#                      |    |    +-------------- netSnmpPlaypen
#                      |    +------------------- netSnmpExperimental
#                      +------------------------ NET-SNMP-MIB


&message('I', '### Starting agent PID '.$$) if ($DEBUG > 0);
&message('I', 'OID: '.$OID) if ($DEBUG > 0);


# Create an agent
my $agent = new NetSNMP::agent(
	# makes the agent read a my_agent_name.conf file
	'Name'		=> $NAME,
	'AgentX'	=> 1
);


# Sleep to spread load at the start time
&message('I', 'Sleeping '.$sleep.'s') if ($DEBUG > 0);
sleep($sleep);


# Register the agent
$agent->register($NAME, $OID, \&myHandler) or die 'Can not register client!';


# Wait for requests in infinite loop
while (1) {
	# Check when was the last parsing
	my $curr_timestamp = time;
	if ($curr_timestamp - $prev_timestamp > $max_time) {
		# Reset values
		%cpus = ();

		# Get new values
		&getData();
		$prev_timestamp = $curr_timestamp;

		if ($DEBUG > 0) {
			if ($^O =~ /linux/i) {
				printf "   * Number of physical CPUs: %d\n", scalar keys %cpus;
				printf "   * Cores per CPU: %d\n", $cpus{'0'}->{'cpu cores'};
				printf "   * Total number of cores: %d\n", (scalar keys %cpus) * $cpus{'0'}->{'cpu cores'} * ($cpus{'0'}->{'cpu cores'} < $cpus{'0'}->{'siblings'} ? 2 : 1);
				printf "   * Hyperthreaded: %d\n", $cpus{'0'}->{'cpu cores'} < $cpus{'0'}->{'siblings'} ? 1 : 0;
				printf "   * Speed: %d\n", $cpus{'0'}->{'cpu MHz'};
				printf "   * Cache: %d\n", $cpus{'0'}->{'cache size'} =~ /^(\d+)/;
				printf "   * Family: %d\n", $cpus{'0'}->{'cpu family'};
				printf "   * Model: %d\n", $cpus{'0'}->{'model'};
				printf "   * Virtual: %d\n", $virtual;
			}
		}
	}

	$agent->agent_check_and_process(1);
}


# Shutdown the agent (will never happen)
$agent->shutdown();


exit 0;


##########


# Get the data
sub getData() {
	&message('I', 'Reading values...') if ($DEBUG > 0);

	# Linux OS
	if ($^O eq 'linux') {
		my @struct;
		my $index = 0;

		open F, '/proc/cpuinfo' or die 'Can not open file!';
		while (my $line = <F>) {
			if ($line =~ /^(.+?)\s+:\s+(.*)$/) {
				$struct[$index]->{$1} = $2;
			}

			if ($line =~ /^$/) {
				$index++;
			}
		}
		close F or die 'Can not close file!';

		foreach my $c (@struct) {
			foreach my $k (keys %{$c}) {
				if ($k ne 'physical id') {
					$cpus{$c->{'physical id'} || 0}->{$k} = $c->{$k};
				}
			}
		}

		# Some more corrections
		$cpus{'0'}->{'cpu cores'} ||= $index;
		$cpus{'0'}->{'siblings'} ||= 0;
		$cpus{'0'}->{'cache size'} =~ s/[^\d]*//g;

		# Detect virtualization (based on http://www.dmo.ca/blog/detecting-virtualization-on-linux/)
		$virtual = `dmidecode | egrep '(Vendor: (QEMU|Bochs)|Product Name: (Virtual Machine|HVM domU)|Manufacturer: VMware, Inc)' | wc -l`;
		chomp $virtual;
	} else {
		die 'E: Unsupported system!';
	}
}


# Function to handle the SNMP requests
sub myHandler() {
	# Input parameters
	my $handler = shift;
	my $registration_info = shift;
	my $request_info = shift;
	my $requests = shift;

	my $request;

	for ($request = $requests; $request; $request = $request->next()) {
		my $oid = $request->getOID();
		if ($request_info->getMode() == MODE_GET) {
			&setRequest('GET', $oid, $request);
		} elsif ($request_info->getMode() == MODE_GETNEXT) {
			&setRequest('GETNEXT', $oid, $request);
		}
	}
}


# Set the value of the OID request
sub setRequest() {
	my $type = shift;
	my $oid = shift;
	my $request = shift;

	my $struct_len = scalar keys %cpus;
	if ($type eq 'GET') {
		$struct_len++;
	}

	# Linux OS
	if ($^O eq 'linux') {
		# All possible values
		for (my $n=1; $n<=9; $n++) {
			if (&compareOID($type, $oid, $OID.'.'.$n)) {
				$request->setOID($OID.'.'.$n) if ($type eq 'GETNEXT');

				if ($n == 1) {
					# Number of physical CPUs
					$request->setValue(ASN_INTEGER, scalar keys %cpus);
				} elsif ($n == 2) {
					# Number of cores per CPU
					$request->setValue(ASN_INTEGER, int $cpus{'0'}->{'cpu cores'});
				} elsif ($n == 3) {
					# Total number of cores
					$request->setValue(ASN_INTEGER, (scalar keys %cpus) * $cpus{'0'}->{'cpu cores'} * ($cpus{'0'}->{'cpu cores'} < $cpus{'0'}->{'siblings'} ? 2 : 1));
				} elsif ($n == 4) {
					# CPU is hyperthreaded
					$request->setValue(ASN_INTEGER, int $cpus{'0'}->{'cpu cores'} < $cpus{'0'}->{'siblings'} ? 1 : 0);
				} elsif ($n == 5) {
					# CPU speed
					$request->setValue(ASN_INTEGER, int $cpus{'0'}->{'cpu MHz'});
				} elsif ($n == 6) {
					# CPU cache
					$request->setValue(ASN_INTEGER, int $cpus{'0'}->{'cache size'});
				} elsif ($n == 7) {
					# CPU family
					$request->setValue(ASN_INTEGER, int $cpus{'0'}->{'cpu family'});
				} elsif ($n == 8) {
					# CPU model
					$request->setValue(ASN_INTEGER, int $cpus{'0'}->{'model'});
				} elsif ($n == 9) {
					# Virtualization
					$request->setValue(ASN_INTEGER, int $virtual);
				}

				last;
			}
		}
	}
}


# Show help message
sub help() {
	printf "Usage: %s [options]\n\n", $0;
	print 'Options:'."\n";
	print '  -e, --debug         debug mode'."\n";
	print '  -h, --help          display this help and exit'."\n\n";
	print 'Examples:'."\n";
	printf " \$ %s -e\n", $0;
}


#######################
##### COMMONS ## #####
################  ###
                   #

# Compare requested OID with one of the possible OIDs
sub compareOID() {
	my $type = shift;
	my $oid = shift;
	my $oid_comp = shift;

	my $ret = 0;

	if ($type eq 'GETNEXT') {
		if ($oid < new NetSNMP::OID($oid_comp)) {
			$ret = 1;
		}
	} else {
		if ($oid == new NetSNMP::OID($oid_comp)) {
			$ret = 1;
		}
	}

	return $ret;
}


# Show message
sub message() {
	my $type = shift;
	my $text = shift;

	my $date = `date '+%F %T'`;
	chomp $date;

	# Append colon to the type
	$type = (defined $type) ? $type.': ' : '';

	printf "[%s] [PID=%d] %s%s\n", $date, $$, $type, $text;
}


# Read default values from config file
sub readDefaults() {
	my %cfg;

	if (-e $defaults_file) {
		# To continue reading of the value on the next line
		my $continue = 0;
		my $key;

		#&message('D', 'Reading defaults');
		open F, $defaults_file or die 'Can not open defaults file!';
		while (my $line = <F>) {
			# Continue reading of the value
			if ($continue == 1) {
				if ($line =~ /^(.*)\\$/) {
					$cfg{$key} .= $1;
				} else {
					$cfg{$key} .= $line;
					chomp $cfg{$key};
					$continue = 0;
					#&message('D', '   *  '.$key.'='.$cfg{$key});
				}
			}
			# Read new value
			if ($continue == 0 and $line =~ /^\s*([A-Z0-9_]+?)\s*=\s*(.*?)(\\|)$/) {
				$key = $1;
				my $val = $2;

				$cfg{$key} = $val;

				if ($line =~ /^.*\\$/) {
					$continue = 1;
				} else {
					#&message('D', '   *  '.$key.'='.$val);
				}
			}
		}
		close F or die 'Can not close defaults file!';
	} else {
		#&message('E', 'Defaults do not exist!');
	}

	return %cfg;
}
