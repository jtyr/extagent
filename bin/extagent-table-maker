#!/usr/bin/perl


#####
#
# Description:
# ============
#
# This is SNMP extension agent which creates a SNMP table.
#
#####
#
# Created by: <jiri(dot)tyr(at)gmail(dot)com>
#
#####


use strict;
use warnings;
use Getopt::Long;
use NetSNMP::agent (':all');
use NetSNMP::ASN (':all');
use SNMP;


# Flush output immidiately
$| = 1;


# File with default values
my $defaults_file = $ENV{'DEFAULT_FILE'} || '/etc/extagent/default/extagent-table-maker.conf';
# Read default values from file
my %CFG = &readDefaults();


# Top OID for the table
my $oid;
# Table OID number
my $number = $CFG{'NUMBER'} || 1234;
# Default session options
my $default_session = 'Version=2c;DestHost=localhost;Community=public;UseNumeric=1';
# Custom session options
my $session;
# Debug variable
my $DEBUG = $CFG{'DEBUG'} || 0;
# To show help
my $help = 0;

# Read the command line options
GetOptions (
	'o|oid=s'	=> \$oid,
	'n|number=i'	=> \$number,
	's|session=s'	=> \$session,
	'e|debug'	=> \$DEBUG,
	'h|help'	=> \$help
);

# Verify input params
if ($help == 1) {
	&help();
	exit 0;
}
unless (defined $oid) {
	print 'ERROR: Missing parameter!'."\n";
	&help();
	exit 1;
}

# Add the initial dot if missing (for numeric format only)
$oid = '.'.$oid if ($oid !~ /[a-zA-Z]/ and $oid !~ /^\./);

# Merge the default and custom session options
my %SESSION;
&getSessionOptions($default_session);
&getSessionOptions($CFG{'SESSION'}) if (exists $CFG{'SESSION'});
&getSessionOptions($session) if (defined $session);
if ($DEBUG > 0) {
	&message('I', 'SNMP::Session options:');
	foreach my $key (sort keys %SESSION) {
		&message('I', ' * '.$key.' = '.$SESSION{$key});
	}
}

# Check the session options
unless (exists $SESSION{'Version'} and exists $SESSION{'DestHost'} and exists $SESSION{'Community'}) {
	print 'ERROR: SNMP::Session options must contain Version, DestHost and Community!'."\n";
	&help();
	exit 1;
}


# Data structure where the data are saved
my @struct;
# Timestamp of the last log parsing
my $prev_timestamp = 0;
# Maximum time between the collections in seconds (4 minutes)
my $max_time = $ENV{'MAX_TIME'} || $CFG{'MAX_TIME'} || 240;
# Random sleep at the start of the script
my $sleep = int rand($ENV{'EXTAGENT_SLEEP'} || $CFG{'SLEEP'} || 0);
# Name of the agent
my $NAME = $CFG{'NAME'} || 'table-maker';
# OID of the agent
my $OID = $oid.'.'.$number;


&message('I', '### Starting agent PID '.$$) if ($DEBUG > 0);
&message('I', 'OID: '.$OID) if ($DEBUG > 0);


# Create an agent
my $agent = new NetSNMP::agent(
	# makes the agent read a my_agent_name.conf file
	'Name'		=> $NAME,
	'AgentX'	=> 1
);


# Sleep to spread load at the start time
&message('I', 'Sleeping '.$sleep.'s') if ($DEBUG > 0);
sleep($sleep);


# Register the agent
$agent->register($NAME, $OID, \&myHandler) or die 'Can not register client!';


# Wait for requests in infinite loop
while (1) {
	# Check when was the last parsing
	my $curr_timestamp = time;
	if ($curr_timestamp - $prev_timestamp > $max_time) {
		# Read SNMP data
		&getData();

		if ($DEBUG > 0 and scalar @struct > 0) {
			&message('I', 'Table:');
			for (my $i=0; $i<scalar @{$struct[0]}; $i++) {
				for (my $j=0; $j<scalar @struct; $j++) {
					&message('I', sprintf " * %s.%d.%d = %s: %s", $OID, $i+1, $j+1, $struct[$j][$i]->{'type'}, $struct[$j][$i]->{'val'});
				}
			}
		}

		$prev_timestamp = $curr_timestamp;
	}

	$agent->agent_check_and_process(1);
}


# Shutdown the agent (will never happen)
$agent->shutdown();


exit 0;


##########

# Parse session options
sub getSessionOptions() {
	my $string = shift;

	foreach my $pair (split /;/, $string) {
		my ($key, $val) = split /=/, $pair;
		$SESSION{$key} = $val;
	}
}


# Get the data
sub getData() {
	&message('I', 'Collecting SNMP data...') if ($DEBUG > 0);

	# Create SNMP session
	my $sess = new SNMP::Session(%SESSION);
	# Request SNMP data
	my $vb = new SNMP::Varbind([$oid]);

	# Temporal data structure
	my @struct_tmp;

	my $n = -1;
	my $prev_tag = '';
	my @type_first;
	my @type;

	while ($vb->tag =~ /^$oid(\.(\d+)|)$/ and not $sess->{'ErrorNum'}) {
		if (scalar @{$vb} > 1) {
			if ($vb->tag ne $prev_tag) {
				# Last number from the OID is the instance
				my $instance = $2;

				$prev_tag = $vb->tag;
				$n++;

				&checkData(\@type, \@type_first);

				@type = ();

				# Add index information
				my $record = {
					'val'	=> $instance,
					'type'	=> 'INTEGER'
				};
				push @{$struct_tmp[$n]}, $record;
			}

			my $record = {
				'val'	=> $vb->[2],
				'type'	=> $vb->[3]
			};

			&message('I', sprintf " * %s.%s = %s: %s", $vb->[0], $vb->[1], $record->{'type'}, $record->{'val'}) if ($DEBUG > 0);

			# Do it only for the first OID
			if ($n == 0) {
				push @type_first, $record->{'type'};
			}

			push @{$struct_tmp[$n]}, $record;
			push @type, $record->{'type'};
		}

		$sess->getnext($vb);
	}

	&checkData(\@type, \@type_first);

	if (scalar @struct_tmp > 1) {
		@struct = @struct_tmp;
	} else {
		# Reset the data
		@struct = ();

		&message('W', 'Table is empty!') if ($DEBUG > 0);
	}
}


# Validate collected data
sub checkData() {
	my $type = shift;
	my $type_first = shift;

	# Check if all agents have the same number of variables
	if (scalar @{$type} != scalar @{$type_first}) {
		die 'Number of variables is not the same!';
	} else {
		# Check if all variables have the same type
		for (my $i=0; $i<scalar @{$type}; $i++) {
			if ($type->[$i] ne $type_first->[$i]) {
				die 'Different types: '.$type->[$i].' != '.$type_first->[$i];
			}
		}
	}
}


# Function to handle the SNMP requests
sub myHandler() {
	# Input parameters
	my $handler = shift;
	my $registration_info = shift;
	my $request_info = shift;
	my $requests = shift;

	my $request;

	for ($request = $requests; $request; $request = $request->next()) {
		my $oid = $request->getOID();
		if ($request_info->getMode() == MODE_GET) {
			&setRequest('GET', $oid, $request);
		} elsif ($request_info->getMode() == MODE_GETNEXT) {
			&setRequest('GETNEXT', $oid, $request);
		}
	}
}


# Set the value of the OID request
sub setRequest() {
	my $type = shift;
	my $oid = shift;
	my $request = shift;

	return if (scalar @struct == 0);

	my $struct_len = scalar @struct;

	# All possible values
	for (my $n=1; $n<=scalar @{$struct[0]}; $n++) {
		if (&compareOID('GETNEXT', $oid, $OID.'.'.$n.'.'.$struct_len)) {
			my $last = 0;

			for (my $i=0; $i<$struct_len; $i++) {
				if (&compareOID($type, $oid, $OID.'.'.$n.'.'.($i+1))) {
					$request->setOID($OID.'.'.$n.'.'.($i+1)) if ($type eq 'GETNEXT');

					my $value = $struct[$i][$n-1]->{'val'};
					my $t = $struct[$i][$n-1]->{'type'};
					my $type;

					if ($t eq 'APPLICATION') {
						$type = ASN_APPLICATION;
					} elsif ($t eq 'BIT_STR') {
						$type = ASN_BIT_STR;
					} elsif ($t eq 'BOOLEAN') {
						$type = ASN_BOOLEAN;
					} elsif ($t eq 'COUNTER') {
						$type = ASN_COUNTER;
					} elsif ($t eq 'COUNTER64') {
						$type = ASN_COUNTER64;
					} elsif ($t eq 'DOUBLE') {
						$type = ASN_DOUBLE;
					} elsif ($t eq 'FLOAT') {
						$type = ASN_FLOAT;
					} elsif ($t eq 'GAUGE') {
						$type = ASN_GAUGE;
					} elsif ($t eq 'INTEGER') {
						$type = ASN_INTEGER;
						$value = int $value;
					} elsif ($t eq 'INTEGER64') {
						$type = ASN_INTEGER64;
					} elsif ($t eq 'IPADDRESS') {
						$type = ASN_IPADDRESS;
					} elsif ($t eq 'NULL') {
						$type = ASN_NULL;
					} elsif ($t eq 'OBJECTID') {
						$type = ASN_OBJECT_ID;
					} elsif ($t eq 'OCTETSTR') {
						$type = ASN_OCTET_STR;
					} elsif ($t eq 'OPAQUE') {
						$type = ASN_OPAQUE;
					} elsif ($t eq 'SEQUENCE') {
						$type = ASN_SEQUENCE;
					} elsif ($t eq 'SET') {
						$type = ASN_SET;
					} elsif ($t eq 'TIMETICKS') {
						$type = ASN_TIMETICKS;
					} elsif ($t eq 'UNSIGNED') {
						$type = ASN_UNSIGNED;
					} else {
						&message('E', 'Undefined type: '.$t);
					}

					$request->setValue($type, $value);

					# To finish the outer loop
					$last = 1;

					last;
				}
			}

			# Finish the outer loop
			if ($last == 1) {
				last;
			}
		}
	}
}


# Show help message
sub help() {
	printf "Usage: %s [options] --oid <oid_string>\n\n", $0;
	print 'Options:'."\n";
	print '  -n, --number=INT    number under which to present the table'."\n";
	print '  -o, --oid=STR       OID of the data to tabularize'."\n";
	print '  -s, --session=STR   SNMP::Session options (see perldoc SNMP)'."\n";
	print '                      (default: Version=2c;DestHost=localhost;Community=public;UseNumeric=1)'."\n";
	print '  -e, --debug         debug mode'."\n";
	print '  -h, --help          display this help and exit'."\n\n";
	print 'Examples:'."\n";
	printf " \$ %s -o 1.3.6.1.4.1.8072.9999.9999.1.1\n", $0;
	printf " \$ %s -o 1.3.6.1.4.1.8072.9999.9999.1.1 -s 'Community=private'\n", $0;
}


#######################
##### COMMONS ## #####
################  ###
                   #

# Compare requested OID with one of the possible OIDs
sub compareOID() {
	my $type = shift;
	my $oid = shift;
	my $oid_comp = shift;

	my $ret = 0;

	if ($type eq 'GETNEXT') {
		if ($oid < new NetSNMP::OID($oid_comp)) {
			$ret = 1;
		}
	} else {
		if ($oid == new NetSNMP::OID($oid_comp)) {
			$ret = 1;
		}
	}

	return $ret;
}


# Show message
sub message() {
	my $type = shift;
	my $text = shift;

	my $date = `date '+%F %T'`;
	chomp $date;

	# Append colon to the type
	$type = (defined $type) ? $type.': ' : '';

	printf "[%s] [PID=%d] %s%s\n", $date, $$, $type, $text;
}


# Read default values from config file
sub readDefaults() {
	my %cfg;

	if (-e $defaults_file) {
		# To continue reading of the value on the next line
		my $continue = 0;
		my $key;

		#&message('D', 'Reading defaults');
		open F, $defaults_file or die 'Can not open defaults file!';
		while (my $line = <F>) {
			# Continue reading of the value
			if ($continue == 1) {
				if ($line =~ /^(.*)\\$/) {
					$cfg{$key} .= $1;
				} else {
					$cfg{$key} .= $line;
					chomp $cfg{$key};
					$continue = 0;
					#&message('D', '   *  '.$key.'='.$cfg{$key});
				}
			}
			# Read new value
			if ($continue == 0 and $line =~ /^\s*([A-Z0-9_]+?)\s*=\s*(.*?)(\\|)$/) {
				$key = $1;
				my $val = $2;

				$cfg{$key} = $val;

				if ($line =~ /^.*\\$/) {
					$continue = 1;
				} else {
					#&message('D', '   *  '.$key.'='.$val);
				}
			}
		}
		close F or die 'Can not close defaults file!';
	} else {
		#&message('E', 'Defaults do not exist!');
	}

	return %cfg;
}
