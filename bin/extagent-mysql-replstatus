#!/usr/bin/perl


#####
#
# Description:
# ============
#
# This is SNMP extension agent for MySQL replication status monitoring.
#
#####
#
# Created by: <jiri(dot)tyr(at)gmail(dot)com>
#
#####


use strict;
use warnings;
use DBI;
use Getopt::Long qw(:config no_ignore_case);
use NetSNMP::agent (':all');
use NetSNMP::ASN qw(ASN_INTEGER ASN_OCTET_STR);


# Flush output immidiately
$| = 1;


# File with default values
my $defaults_file = $ENV{'DEFAULT_FILE'} || '/etc/extagent/default/extagent-mysql-replstatus.conf';
# Read default values from file
my %CFG = &readDefaults();


# Hostname
my $host = $CFG{'HOST'} || 'localhost';
# Port number
my $port = $CFG{'PORT'} || 3306;
# Socket file
my $socket = $CFG{'SOCKET'} || undef;
# Database name
my $base = $CFG{'BASE'} || 'test';
# User name
my $user = $CFG{'USER'} || undef;
# User password
my $pass = $CFG{'PASSWORD'} || undef;
# Connection parameters
my $param_str = $CFG{'PARAMS'} || '';
# Connection timeout
my $timeout = $CFG{'TIMEOUT'} || 5;
# Application instance
my $instance;
# Debug variable
my $DEBUG = $CFG{'DEBUG'} || 0;
# To show help
my $help = 0;

# Read the command line options
GetOptions (
	'i|instance=i'	=> \$instance,
	'H|host=s'	=> \$host,
	'P|port=i'	=> \$port,
	's|socket=s'	=> \$socket,
	'b|base=s'	=> \$base,
	'u|user=s'	=> \$user,
	'p|password=s'	=> \$pass,
	'r|params=s'	=> \$param_str,
	't|timeout=i'	=> \$timeout,
	'e|debug'	=> \$DEBUG,
	'h|help'	=> \$help
);

# Verify input params
if ($help == 1) {
	&help();
	exit 0;
}
unless (((defined $host and defined $port) or defined $socket) and defined $user and defined $pass and defined $instance) {
	print 'ERROR: Missing parameter!'."\n";
	&help();
	exit 1;
}


# Connection parameters structure
my $param = {
	'mysql_connect_timeout'	=> $timeout,
	'RaiseError'		=> 1,
	'PrintError'		=> 0
};
my @param = split /;/, $param_str;
foreach my $pair (@param) {
	my ($key, $value) = split /:/, $pair;
	if (defined $key and defined $value) {
		$param->{$key} = $value;
		&message('I', 'Adding connection param: '.$key.'='.$value) if ($DEBUG > 0);
	}
}
if (defined $socket) {
	$param->{'mysql_socket'} = $socket;
}


# Data structure where the data are saved
my %struct;
# Timestamp of the last log parsing
my $prev_timestamp = 0;
# Maximum time between the collections in seconds (4 minutes)
my $max_time = $ENV{'MAX_TIME'} || $CFG{'MAX_TIME'} || 240;
# Parse only last N minutes
my $mins = $ENV{'MINS'} || $CFG{'MINS'} || 5;
# Random sleep at the start of the script
my $sleep = int rand($ENV{'EXTAGENT_SLEEP'} || $CFG{'SLEEP'} || 0);
# Name of the agent
my $NAME = $CFG{'NAME'} || 'mysql-replstatus';
# OID of the agent
my $OID = ($CFG{'OID'} ||
          '1.3.6.1.4.1.8072.9999.9999.7.1').'.'.$instance;
#                      |    |    |    | |       |
#                      |    |    |    | |       +--- app instance
#                      |    |    |    | +----------- replstatus
#                      |    |    |    +------------- MySQL
#                      |    |    +------------------ netSnmpPlaypen
#                      |    +----------------------- netSnmpExperimental
#                      +---------------------------- NET-SNMP-MIB


&message('I', '### Starting agent PID '.$$) if ($DEBUG > 0);
&message('I', 'OID: '.$OID) if ($DEBUG > 0);


# Create an agent
my $agent = new NetSNMP::agent(
	# makes the agent read a my_agent_name.conf file
	'Name'		=> $NAME,
	'AgentX'	=> 1
);


# Sleep to spread load at the start time
&message('I', 'Sleeping '.$sleep.'s') if ($DEBUG > 0);
sleep($sleep);


# Register the agent
$agent->register($NAME, $OID, \&myHandler) or die 'Can not register client!';


# Wait for requests in infinite loop
while (1) {
	# Check when was the last parsing
	my $curr_timestamp = time;
	if ($curr_timestamp - $prev_timestamp > $max_time) {
		# Reset values
		%struct = ();

		# Get new values
		&getData();
		$prev_timestamp = $curr_timestamp;

		if ($DEBUG > 0) {
			&message(undef, '   * accepts connections:    '.$struct{'accepts_connections'});
			&message(undef, '   * used connections:       '.$struct{'used_connections'}.'%');
			&message(undef, '   * replication IO thread:  '.$struct{'repl_io'});
			&message(undef, '   * replication SQL thread: '.$struct{'repl_sql'});
			&message(undef, '   * seconds behind master:  '.$struct{'repl_sbm'});
		}
	}

	$agent->agent_check_and_process(1);
}


# Shutdown the agent (will never happen)
$agent->shutdown();


exit 0;


##########


# Get the data
sub getData() {
	&message('I', 'Reading values...') if ($DEBUG > 0);

	# DB handler
	my $dbh;
	my ($variables, $status, $status_slave);

	eval {
		local $SIG{'ALRM'} = sub { die 'TIMEOUT' };
		alarm $timeout;

		$dbh = DBI->connect('DBI:mysql:database='.$base.';host='.$host.';port='.$port, $user, $pass, $param) or die $DBI::errstr;

		$variables    = &getShowHash($dbh, 'SHOW GLOBAL VARIABLES');
		$status       = &getShowHash($dbh, 'SHOW /*!50002 GLOBAL */ STATUS');
		$status_slave = shift @{[values(%{$dbh->selectall_hashref('SHOW SLAVE STATUS', 1)})]};

		alarm 0;
	};
	alarm 0;

	if (length $@) {
		warn 'DB error: '.$@;
	}

	# If we can disconnect, the DB accepts connections properly
	$struct{'accepts_connections'} = 0;
	eval {
		$dbh->disconnect();
		$struct{'accepts_connections'} = 1;
	};

	##########

	# Percentage of used connections
	$struct{'used_connections'} = -1;
	if (exists $status->{'Threads_connected'} and exists $variables->{'max_connections'}) {
		$struct{'used_connections'} = int(($status->{'Threads_connected'}*100/$variables->{'max_connections'}) + 0.5);
	}

	# Replication IO thread
	$struct{'repl_io'} = 1;
	if (exists $status_slave->{'Slave_IO_Running'} and lc $status_slave->{'Slave_IO_Running'} ne 'yes') {
		$struct{'repl_io'} = 0;
	}

	# Replication SQL thread
	$struct{'repl_sql'} = 1;
	if (exists $status_slave->{'Slave_SQL_Running'} and lc $status_slave->{'Slave_SQL_Running'} ne 'yes') {
		$struct{'repl_sql'} = 0;
	}

	# Replication seconds behind master
	$struct{'repl_sbm'} = -1;
	if (exists $status_slave->{'Seconds_Behind_Master'} and defined $status_slave->{'Seconds_Behind_Master'}) {
		$struct{'repl_sbm'} = $status_slave->{'Seconds_Behind_Master'};
	}
}


# Returns hash of values of the SHOW query
sub getShowHash() {
	my $dbh = shift;
	my $query = shift;

	my $var = ();

	eval {
		my $sth = $dbh->prepare($query) or die $dbh->errstr();
		$sth->execute() or die $dbh->errstr();
		while (my ($key, $val) = $sth->fetchrow_array()) {
			$var->{$key} = $val;
		}
	};
	warn $@ if length $@ > 0;

	return $var;
}


# Function to handle the SNMP requests
sub myHandler() {
	# Input parameters
	my $handler = shift;
	my $registration_info = shift;
	my $request_info = shift;
	my $requests = shift;

	my $request;

	for ($request = $requests; $request; $request = $request->next()) {
		my $oid = $request->getOID();
		if ($request_info->getMode() == MODE_GET) {
			&setRequest('GET', $oid, $request);
		} elsif ($request_info->getMode() == MODE_GETNEXT) {
			&setRequest('GETNEXT', $oid, $request);
		}
	}
}


# Set the value of the OID request
sub setRequest() {
	my $type = shift;
	my $oid = shift;
	my $request = shift;

	# All possible values
	for (my $n=1; $n<=6; $n++) {
		if (&compareOID($type, $oid, $OID.'.'.$n)) {
			$request->setOID($OID.'.'.$n) if ($type eq 'GETNEXT');

			if ($n == 1) {
				# Port number
				$request->setValue(ASN_INTEGER, int $port);
			} elsif ($n == 2) {
				# Accepts connections
				$request->setValue(ASN_INTEGER, int $struct{'accepts_connections'});
			} elsif ($n == 3) {
				# Used connections
				$request->setValue(ASN_INTEGER, int $struct{'used_connections'});
			} elsif ($n == 4) {
				# Replication IO thread
				$request->setValue(ASN_INTEGER, int $struct{'repl_io'});
			} elsif ($n == 5) {
				# Replication SQL thread
				$request->setValue(ASN_INTEGER, int $struct{'repl_sql'});
			} elsif ($n == 6) {
				# Seconds behind master
				$request->setValue(ASN_INTEGER, int $struct{'repl_sbm'});
			}

			last;
		}
	}
}


# Show help message
sub help() {
	printf "Usage: %s [options] [--host <host> --port <port>|--socket <socket>] -i <instance>\n\n", $0;
	print 'Options:'."\n";
	print '  -i, --instance=NUM  application instance'."\n";
	print '  -H, --host=STR      host name (default: localhost)'."\n";
	print '  -P, --port=NUM      port number (default: 3306)'."\n";
	print '  -s, --socket=STR    socket file path (default: /var/lib/mysql/mysql.sock)'."\n";
	print '  -b, --base=STR      database name (default: test)'."\n";
	print '  -u, --user=STR      user name'."\n";
	print '  -p, --password=STR  user password'."\n";
	print '  -r, --params=STR    connection parameters (default: RaiseError:1;PrintError:0)'."\n";
	print '  -t, --timeout=NUM   connection timeout in seconds (default: 5)'."\n";
	print '  -e, --debug         debug mode'."\n";
	print '  -h, --help          display this help and exit'."\n\n";
	print 'Examples:'."\n";
	printf " \$ %s -i 1\n", $0;
	printf " \$ %s -i 1 -H localhost -P 3307 -u user1 -p Pa55w0rd -t 10\n", $0;
	printf " \$ %s -i 1 -s /var/tmp/mysql5.sock -u user1 -p Pa55w0rd\n", $0;
}


#######################
##### COMMONS ## #####
################  ###
                   #

# Compare requested OID with one of the possible OIDs
sub compareOID() {
	my $type = shift;
	my $oid = shift;
	my $oid_comp = shift;

	my $ret = 0;

	if ($type eq 'GETNEXT') {
		if ($oid < new NetSNMP::OID($oid_comp)) {
			$ret = 1;
		}
	} else {
		if ($oid == new NetSNMP::OID($oid_comp)) {
			$ret = 1;
		}
	}

	return $ret;
}


# Show message
sub message() {
	my $type = shift;
	my $text = shift;

	my $date = `date '+%F %T'`;
	chomp $date;

	# Append colon to the type
	$type = (defined $type) ? $type.': ' : '';

	printf "[%s] [PID=%d] %s%s\n", $date, $$, $type, $text;
}


# Read default values from config file
sub readDefaults() {
	my %cfg;

	if (-e $defaults_file) {
		# To continue reading of the value on the next line
		my $continue = 0;
		my $key;

		#&message('D', 'Reading defaults');
		open F, $defaults_file or die 'Can not open defaults file!';
		while (my $line = <F>) {
			# Continue reading of the value
			if ($continue == 1) {
				if ($line =~ /^(.*)\\$/) {
					$cfg{$key} .= $1;
				} else {
					$cfg{$key} .= $line;
					chomp $cfg{$key};
					$continue = 0;
					#&message('D', '   *  '.$key.'='.$cfg{$key});
				}
			}
			# Read new value
			if ($continue == 0 and $line =~ /^\s*([A-Z0-9_]+?)\s*=\s*(.*?)(\\|)$/) {
				$key = $1;
				my $val = $2;

				$cfg{$key} = $val;

				if ($line =~ /^.*\\$/) {
					$continue = 1;
				} else {
					#&message('D', '   *  '.$key.'='.$val);
				}
			}
		}
		close F or die 'Can not close defaults file!';
	} else {
		#&message('E', 'Defaults do not exist!');
	}

	return %cfg;
}
