#!/usr/bin/perl


#####
#
# Description:
# ============
#
# This is SNMP extension agent for Java application status monitoring.
#
#####
#
# Created by: <jiri(dot)tyr(at)gmail(dot)com>
#
#####


use strict;
use warnings;
use Getopt::Long;
use Time::Local;
use NetSNMP::agent (':all');
use NetSNMP::ASN qw(ASN_INTEGER ASN_OCTET_STR);


# Flush output immidiately
$| = 1;


# File with default values
my $defaults_file = $ENV{'DEFAULT_FILE'} || '/etc/extagent/default/extagent-javaapp-status.conf';
# Read default values from file
my %CFG = &readDefaults();


# Application instance
my $instance;
# Dirrectory with the property files
my $dir = $CFG{'DIR'};
# Regexp file pattern
my $file_pattern = $CFG{'PATTERN'} || '(.+)\.(.+)\.properties';
# Debug variable
my $DEBUG = $CFG{'DEBUG'} || 0;
# To show help
my $help = 0;

# Read the command line options
GetOptions (
	'i|instance=i'	=> \$instance,
	'd|dir=s'	=> \$dir,
	'p|pattern=s'	=> \$file_pattern,
	'e|debug'	=> \$DEBUG,
	'h|help'	=> \$help
);

# Verify input params
if ($help == 1) {
	&help();
	exit 0;
}
unless (defined $dir and defined $instance) {
	print 'ERROR: Missing parameter!'."\n";
	&help();
	exit 1;
}


# Data structure where the data are saved
my @struct;
# Timestamp of the last log parsing
my $prev_timestamp = 0;
# Maximum time between the collections in seconds (4 minutes)
my $max_time = $ENV{'MAX_TIME'} || $CFG{'MAX_TIME'} || 240;
# Random sleep at the start of the script
my $sleep = int rand($CFG{'SLEEP'} || $ENV{'EXTAGENT_SLEEP'} || 60);
# Name of the agent
my $NAME = $CFG{'NAME'} || 'javaapp-status';
# OID of the agent
my $OID = ($CFG{'OID'} ||
          '1.3.6.1.4.1.8072.9999.9999.5.1').'.'.$instance;
#                      |    |    |    | |       |
#                      |    |    |    | |       +--- app instance
#                      |    |    |    | +----------- status
#                      |    |    |    +------------- javaapp
#                      |    |    +------------------ netSnmpPlaypen
#                      |    +----------------------- netSnmpExperimental
#                      +---------------------------- NET-SNMP-MIB


&message('I', '### Starting agent PID '.$$) if ($DEBUG > 0);
&message('I', 'OID: '.$OID) if ($DEBUG > 0);


# Create an agent
my $agent = new NetSNMP::agent(
	# makes the agent read a my_agent_name.conf file
	'Name'		=> $NAME,
	'AgentX'	=> 1
);


# Sleep to spread load at the start time
&message('I', 'Sleeping '.$sleep.'s') if ($DEBUG > 0);
sleep($sleep);


# Register the agent
$agent->register($NAME, $OID, \&myHandler) or die 'Can not register client!';


# Wait for requests in infinite loop
while (1) {
	# Check when was the last parsing
	my $curr_timestamp = time;
	if ($curr_timestamp - $prev_timestamp > $max_time) {
		# Reset values
		@struct = ();

		# Get new values
		&getData();
		$prev_timestamp = $curr_timestamp;

		if ($DEBUG > 0) {
			foreach my $s (@struct) {
				&message(undef, '   * '.$s->{'host'}.'.'.$s->{'appinst'}.': '.$s->{'status'}.'('.$s->{'status-code'}.'), '.$s->{'status-duration'});
			}
		}
	}

	$agent->agent_check_and_process(1);
}


# Shutdown the agent (will never happen)
$agent->shutdown();


exit 0;


##########


# Get the data
sub getData() {
	&message('I', 'Reading values...') if ($DEBUG > 0);

	# Get list of files from the directory
	opendir DIR, $dir or die 'Can not open directory!';
	my @files = readdir(DIR);
	closedir DIR or die 'Can not close directory!';

	# Find all matching files
	foreach my $f (sort @files) {
		if ($f =~ /$file_pattern/) {
			my $record = {
				'host'		=> $1,
				'appinst'	=> $2
			};

			open F, $dir.'/'.$f or die 'Can not open file!';
			while (my $line = <F>) {
				if ($line =~ /^((status|status-time|envid)) = (.*)$/) {
					my $k = $1;
					my $v = $3;

					$record->{$k} = $v;
				}
			}
			close F or die 'Can not close file!';

			# Some file doesn't have all the information
			if (
				exists $record->{'status'} and exists $record->{'status-time'} and exists $record->{'envid'} and
				($record->{'status'} eq 'down' or $record->{'status'} eq 'start failed' or $record->{'status'} eq 'starting')
			) {
				# Define status duration
				$record->{'status-duration'} = &timeDifference($record->{'status-time'});

				# Define status code
				$record->{'status-code'} = &getStatusCode($record->{'status'});

				if ($record->{'envid'} =~ /prod[1-9]/) {
					push @struct, $record;
				}
			}
		}
	}
}


# Return the time difference from the current time
sub timeDifference() {
	my $date = shift;

	my $diff = 0;

	# Format: 12-02-27 20:33:41 UTC
	if ($date =~ /(..)-(..)-(..) (..):(..):(..) UTC/) {
		my $year	= int($1);
		my $mon		= int($2)-1;
		my $mday	= int($3);
		my $hour	= int($4);
		my $min		= int($5);
		my $sec		= int($6);

		my $ts_status = timelocal($sec,$min,$hour,$mday,$mon,$year);
		my $ts_current = time();

		$diff = $ts_current - $ts_status;
	}

	return $diff;
}


# Return status code according to the status name
sub getStatusCode() {
	my $status_name = shift;

	my $code = -1;

	if ($status_name eq 'deployed') {
		$code = 0;
	} elsif ($status_name eq 'starting') {
		$code = 1;
	} elsif ($status_name eq 'starting failed') {
		$code = 2;
	} elsif ($status_name eq 'running') {
		$code = 3;
	} elsif ($status_name eq 'down') {
		$code = 4;
	} elsif ($status_name eq 'stop failed') {
		$code = 5;
	} elsif ($status_name eq 'stopped') {
		$code = 6;
	} elsif ($status_name eq 'closed') {
		$code = 7;
	}

	return $code;
}


# Function to handle the SNMP requests
sub myHandler() {
	# Input parameters
	my $handler = shift;
	my $registration_info = shift;
	my $request_info = shift;
	my $requests = shift;

	my $request;

	for ($request = $requests; $request; $request = $request->next()) {
		my $oid = $request->getOID();
		if ($request_info->getMode() == MODE_GET) {
			&setRequest('GET', $oid, $request);
		} elsif ($request_info->getMode() == MODE_GETNEXT) {
			&setRequest('GETNEXT', $oid, $request);
		}
	}
}


# Set the value of the OID request
sub setRequest() {
	my $type = shift;
	my $oid = shift;
	my $request = shift;

	my $struct_len = scalar @struct;
	if ($type eq 'GET') {
		$struct_len++;
	}

	# All possible values
	for (my $n=1; $n<=6; $n++) {
		if (&compareOID('GETNEXT', $oid, $OID.'.'.$n.'.'.$struct_len)) {
			my $last = 0;

			for (my $i=0; $i<$struct_len; $i++) {
				if (&compareOID($type, $oid, $OID.'.'.$n.'.'.($i+1))) {
					$request->setOID($OID.'.'.$n.'.'.($i+1)) if ($type eq 'GETNEXT');

					if ($n == 1) {
						# Host name
						$request->setValue(ASN_OCTET_STR, $struct[$i]->{'host'});
					} elsif ($n == 2) {
						# App name
						$request->setValue(ASN_OCTET_STR, $struct[$i]->{'appinst'});
					} elsif ($n == 3) {
						# Status name
						$request->setValue(ASN_OCTET_STR, $struct[$i]->{'status'});
					} elsif ($n == 4) {
						# Status code
						$request->setValue(ASN_INTEGER, int $struct[$i]->{'status-code'});
					} elsif ($n == 5) {
						# Status time
						$request->setValue(ASN_OCTET_STR, $struct[$i]->{'status-time'});
					} elsif ($n == 6) {
						# Status duration
						$request->setValue(ASN_INTEGER, int $struct[$i]->{'status-duration'});
					}

					# To finish the outer loop
					$last = 1;

					last;
				}
			}

			# Finish the outer loop
			if ($last == 1) {
				last;
			}
		}
	}
}


# Show help message
sub help() {
	printf "Usage: %s [options] --dir <dir> --instance <instance>\n\n", $0;
	print 'Options:'."\n";
	print '  -i, --instance=NUM  application instance'."\n";
	print '  -d, --dir=STR       directory path'."\n";
	print '  -p, --pattern=STR   regexp pattern for the properties files'."\n";
	print '  -e, --debug         debug mode'."\n";
	print '  -h, --help          display this help and exit'."\n\n";
	print 'Examples:'."\n";
	printf " \$ %s -d '/var/tmp/app' -i 1\n", $0;
	printf " \$ %s -d '/var/tmp/app' -p '.*\\.properties' -i 1\n", $0;
}


#######################
##### COMMONS ## #####
################  ###
                   #

# Compare requested OID with one of the possible OIDs
sub compareOID() {
	my $type = shift;
	my $oid = shift;
	my $oid_comp = shift;

	my $ret = 0;

	if ($type eq 'GETNEXT') {
		if ($oid < new NetSNMP::OID($oid_comp)) {
			$ret = 1;
		}
	} else {
		if ($oid == new NetSNMP::OID($oid_comp)) {
			$ret = 1;
		}
	}

	return $ret;
}


# Show message
sub message() {
	my $type = shift;
	my $text = shift;

	my $date = `date '+%F %T'`;
	chomp $date;

	# Append colon to the type
	$type = (defined $type) ? $type.': ' : '';

	printf "[%s] [PID=%d] %s%s\n", $date, $$, $type, $text;
}


# Read default values from config file
sub readDefaults() {
	my %cfg;

	if (-e $defaults_file) {
		# To continue reading of the value on the next line
		my $continue = 0;
		my $key;

		#&message('D', 'Reading defaults');
		open F, $defaults_file or die 'Can not open defaults file!';
		while (my $line = <F>) {
			# Continue reading of the value
			if ($continue == 1) {
				if ($line =~ /^(.*)\\$/) {
					$cfg{$key} .= $1;
				} else {
					$cfg{$key} .= $line;
					chomp $cfg{$key};
					$continue = 0;
					#&message('D', '   *  '.$key.'='.$cfg{$key});
				}
			}
			# Read new value
			if ($continue == 0 and $line =~ /^\s*([A-Z0-9_]+?)\s*=\s*(.*?)(\\|)$/) {
				$key = $1;
				my $val = $2;

				$cfg{$key} = $val;

				if ($line =~ /^.*\\$/) {
					$continue = 1;
				} else {
					#&message('D', '   *  '.$key.'='.$val);
				}
			}
		}
		close F or die 'Can not close defaults file!';
	} else {
		#&message('E', 'Defaults do not exist!');
	}

	return %cfg;
}
