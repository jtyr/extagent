#!/usr/bin/perl


#####
#
# Description:
# ============
#
# This is SNMP extension agent for SSL certificates expiry monitoring.
#
#####
#
# Created by: <jiri(dot)tyr(at)gmail(dot)com>
#
#####


use strict;
use warnings;
use Getopt::Long;
use Time::Local;
use NetSNMP::agent (':all');
use NetSNMP::ASN qw(ASN_INTEGER ASN_OCTET_STR);


# Flush output immidiately
$| = 1;


# File with default values
my $defaults_file = $ENV{'DEFAULT_FILE'} || '/etc/extagent/default/extagent_cert_expiry.conf';
# Read default values from file
my %CFG = &readDefaults();


# Application instance
my $instance;
# List of domains (domain:port)
my $domain_list = undef;
# Directory with certificates
my $dir;
# Certificates file pattern
my $file_pattern = $CFG{'FILE_PATTERN'} || '.*\.crt';
# Input files type (PEM, DER, NET)
my $file_type = $CFG{'FILE_TYPE'} || 'PEM';
# SSL connection timeout in seconds
my $timeout = $CFG{'TIMEOUT'} || 2;
# Debug variable
my $DEBUG = $CFG{'DEBUG'} || 0;
# To show help
my $help = 0;

# Read the command line options
GetOptions (
	'i|instance=i'	=> \$instance,
	'o|domains=s'	=> \$domain_list,
	'd|dir=s'	=> \$dir,
	'p|pattern=s'	=> \$file_pattern,
	't|type=s'	=> \$file_type,
	'm|timeout=i'	=> \$timeout,
	'e|debug'	=> \$DEBUG,
	'h|help'	=> \$help
);

# Verify input params
if ($help == 1) {
	&help();
	exit 0;
}
unless ((defined $dir or defined $domain_list) and defined $instance) {
	print 'ERROR: Missing parameter!'."\n";
	&help();
	exit 1;
}
if (defined $dir and ! -e $dir) {
	print 'ERROR: Directory does not exist!'."\n";
	exit 1;
}
if (defined $dir and defined $domain_list) {
	print 'ERROR: You can not define the host list together with the directory!'."\n";
	print 'ERROR: Please choose only one of the options.'."\n";
	exit 1;
}

# List of hosts or files
my %struct;
# Path to the OpenSSL binary
my $openssl = $CFG{'OPENSSL'} || '/usr/bin/openssl';
# Default port
my $default_port = $CFG{'DEFAULT_PORT'} || 443;
# Timestamp of the last log parsing
my $prev_timestamp = 0;
# Maximum time between the collections in seconds (4 minutes)
my $max_time = $CFG{'MAX_TIME'} || 240;
# Random sleep at the start of the script
my $sleep = int rand($CFG{'SLEEP'} || $ENV{'EXTAGENT_SLEEP'} || 60);
# List of months
my %months = (
	'Jan' =>  0,
	'Feb' =>  1,
	'Mar' =>  2,
	'Apr' =>  3,
	'May' =>  4,
	'Jun' =>  5,
	'Jul' =>  6,
	'Aug' =>  7,
	'Sep' =>  8,
	'Oct' =>  9,
	'Nov' => 10,
	'Dec' => 11
);
# Name of the agent
my $NAME = $CFG{'NAME'} || 'cert_expiry';
# Network OID of the agent
my $NET_OID = ($CFG{'NET_OID'} ||
              '1.3.6.1.4.1.8072.9999.9999.2.1.').'.'.$instance;
#                          |    |    |    | |        |
#                          |    |    |    | |        +--- app instance
#                          |    |    |    | +------------ network
#                          |    |    |    +-------------- cert expiry
#                          |    |    +------------------- netSnmpPlaypen
#                          |    +------------------------ netSnmpExperimental
#                          +----------------------------- NET-SNMP-MIB
# File OID of the agent
my $FILE_OID = ($CFG{'FILE_OID'} ||
               '1.3.6.1.4.1.8072.9999.9999.2.2').'.'.$instance;
#                           |    |    |    | |       |
#                           |    |    |    | |       +--- app instance
#                           |    |    |    | +----------- file
#                           |    |    |    +------------- cert expiry
#                           |    |    +------------------ netSnmpPlaypen
#                           |    +----------------------- netSnmpExperimental
#                           +---------------------------- NET-SNMP-MIB
# OID of the agent
my $OID = $FILE_OID;
if (defined $domain_list) {
	$OID = $NET_OID;
}

&message('I', '### Starting agent PID '.$$) if ($DEBUG > 0);
&message('I', 'OID: '.$OID) if ($DEBUG > 0);


# Create an agent
my $agent = new NetSNMP::agent(
	# makes the agent read a my_agent_name.conf file
	'Name'		=> $NAME,
	'AgentX'	=> 1
);


# Sleep to spread load at the start time
&message('I', 'Sleeping '.$sleep.'s') if ($DEBUG > 0);
sleep($sleep);


# Register the agent
$agent->register($NAME, $OID, \&myHandler) or die 'Can not register client!';


# Wait for requests in infinite loop
while (1) {
	# Check when was the last parsing
	my $curr_timestamp = time;
	if ($curr_timestamp - $prev_timestamp > $max_time) {
		# Reset values
		%struct = ();

		# Get new values
		&getData();
		$prev_timestamp = $curr_timestamp;
	}

	$agent->agent_check_and_process(1);
}


# Shutdown the agent (will never happen)
$agent->shutdown();


exit 0;


##########


# Get the data
sub getData() {
	&message('I', 'Checking certificates...') if ($DEBUG > 0);

	if (defined $dir) {
		# Get list of files from the directory
		opendir DIR, $dir or die 'Can not open directory!';
		my @files = readdir(DIR);
		closedir DIR or die 'Can not close directory!';

		# Find all matching files
		foreach my $f (sort @files) {
			if ($f =~ /$file_pattern/) {
				# Get the expiry info
				my ($date, $days) = &getExpiry('file', $f);

				&message(undef, '   * FILE: '.$f.', '.$date.', '.$days) if ($DEBUG > 0);
				$struct{$f} = {
					'date' => $date,
					'days' => $days
				};
			}
		}
	} else {
		# Parse the list of hosts
		my @list = split /\s*,\s*/, $domain_list;
		foreach my $l (@list) {
			my ($host, $port) = split /:/, $l;
			$port ||= $default_port;

			my $connection = $host.':'.$port;

			# Get the expiry info
			my ($date, $days) = &getExpiry('network', $connection);

			&message(undef, '   * NET: '.$connection.', '.$date.', '.$days) if ($DEBUG > 0);
			$struct{$connection} = {
				'date' => $date,
				'days' => $days
			};
		}
	}
}


# Run the specific OpenSSL command and return the date and days value
sub getExpiry() {
	my $type = shift;
	my $key = shift;

	&message(undef, '   * Checking: '.$key) if ($DEBUG > 0);

	my $date = '';
	my $days = 0;

	my $cmd;
	if ($type eq 'network') {
		# Command to get the expiry info from the network
		$cmd = 'echo "" | '.$openssl.' s_client -showcerts -connect '.$key.' 2>/dev/null | sed -n "/-----BEGIN/,/-----END/p" | '.$openssl.' x509 -enddate -noout 2>/dev/null | sed "s/.*=//"';
	} else {
		# Command to get the expiry info from the file
		$cmd = 'cat '.$dir.'/'.$key.' | '.$openssl.' x509 -inform '.$file_type.' -enddate -noout 2>/dev/null | sed "s/.*=//"';
	}

	eval {
		local $SIG{'ALRM'} = sub { die 'timeout!'};
		alarm $timeout;
		$date = `$cmd`;
		alarm 0;
	};
	if (length $@) {
		&message(undef, '     - Timeout reached') if ($DEBUG > 0);
	}

	chomp $date;

	$days = &getNumberOfDays($date);

	return ($date, $days);
}


# Convert date to UNIX timestamp
sub getNumberOfDays() {
	my $date = shift;

	my $days = 0;

	if ($date =~ /(...) (..) (..):(..):(..) (....) GMT/) {
		my $year = $6;
		my $mon = $months{$1};
		my $mday = $2;
		my $hour = $3;
		my $min = $4;
		my $sec = $5;

		my $ts_expire = timelocal($sec,$min,$hour,$mday,$mon,$year);
		my $ts_current = time();

		$days = ($ts_expire-$ts_current)/86400;
	}

	return int($days);
}


# Function to handle the SNMP requests
sub myHandler() {
	# Input parameters
	my $handler = shift;
	my $registration_info = shift;
	my $request_info = shift;
	my $requests = shift;

	my $request;

	for ($request = $requests; $request; $request = $request->next()) {
		my $oid = $request->getOID();
		if ($request_info->getMode() == MODE_GET) {
			&setRequest('GET', $oid, $request);
		} elsif ($request_info->getMode() == MODE_GETNEXT) {
			&setRequest('GETNEXT', $oid, $request);
		}
	}
}


# Set the value of the OID request
sub setRequest() {
	my $type = shift;
	my $oid = shift;
	my $request = shift;

	my $struct_len = scalar keys %struct;
	if ($type eq 'GET') {
		$struct_len++;
	}

	# All possible values
	for (my $n=1; $n<=3; $n++) {
		if (&compareOID('GETNEXT', $oid, $OID.'.'.$n.'.'.$struct_len)) {
			my $last = 0;
			my $i = 1;

			foreach my $k (sort keys %struct) {
				if (&compareOID($type, $oid, $OID.'.'.$n.'.'.$i)) {
					$request->setOID($OID.'.'.$n.'.'.$i) if ($type eq 'GETNEXT');

					if ($n == 1) {
						# Domain or file name
						$request->setValue(ASN_OCTET_STR, $k);
					} elsif ($n == 2) {
						# Expiration date
						$request->setValue(ASN_OCTET_STR, $struct{$k}->{'date'});
					} elsif ($n == 3) {
						# Days remaining to the expiration
						$request->setValue(ASN_INTEGER, int $struct{$k}->{'days'});
					}

					# To finish the outer loop
					$last = 1;

					last;
				}

				$i++;
			}

			# Finish the outer loop
			if ($last == 1) {
				last;
			}
		}
	}
}


# Show help message
sub help() {
	printf "Usage: %s [options] [--dir <dir_path>|--domains <domain_list>] --instance <instance>\n\n", $0;
	print '  -o, --domains=STR   list of domains to check (domain:port, default port is 443)'."\n";
	print '  -d, --dir=STR       directory with the certificates'."\n";
	print '  -p, --pattern=STR   regexp pattern of the certificate files'."\n";
	print '                      (default: .*\.crt)'."\n";
	print '  -t, --type=STR      type of the file certificate (PEM=default, DER, NET)'."\n";
	print '  -i, --instance=NUM  application instance'."\n";
	print '  -m, --timeout=NUM   SSL connection timeout in seconds (default: 2)'."\n";
	print '  -e, --debug         debug mode'."\n";
	print '  -h, --help          display this help and exit'."\n\n";
	print 'Examples:'."\n";
	printf " \$ %s -d /data/build/certificates/ -i 1\n", $0;
	printf " \$ %s -o 'domain1.com:4433,domain2.com' -i 1\n", $0;
}


#######################
##### COMMONS ## #####
################  ###
                   #

# Compare requested OID with one of the possible OIDs
sub compareOID() {
	my $type = shift;
	my $oid = shift;
	my $oid_comp = shift;

	my $ret = 0;

	if ($type eq 'GETNEXT') {
		if ($oid < new NetSNMP::OID($oid_comp)) {
			$ret = 1;
		}
	} else {
		if ($oid == new NetSNMP::OID($oid_comp)) {
			$ret = 1;
		}
	}

	return $ret;
}


# Show message
sub message() {
	my $type = shift;
	my $text = shift;

	my $date = `date '+%F %T'`;
	chomp $date;

	# Append colon to the type
	$type = (defined $type) ? $type.': ' : '';

	printf "[%s] [PID=%d] %s%s\n", $date, $$, $type, $text;
}


# Read default values from config file
sub readDefaults() {
	my %cfg;

	if (-e $defaults_file) {
		# To continue reading of the value on the next line
		my $continue = 0;
		my $key;

		#&message('D', 'Reading defaults');
		open F, $defaults_file or die 'Can not open defaults file!';
		while (my $line = <F>) {
			# Continue reading of the value
			if ($continue == 1) {
				if ($line =~ /^(.*)\\$/) {
					$cfg{$key} .= $1;
				} else {
					$cfg{$key} .= $line;
					chomp $cfg{$key};
					$continue = 0;
					#&message('D', '   *  '.$key.'='.$cfg{$key});
				}
			}
			# Read new value
			if ($continue == 0 and $line =~ /^\s*([A-Z0-9_]+?)\s*=\s*(.*?)(\\|)$/) {
				$key = $1;
				my $val = $2;

				$cfg{$key} = $val;

				if ($line =~ /^.*\\$/) {
					$continue = 1;
				} else {
					#&message('D', '   *  '.$key.'='.$val);
				}
			}
		}
		close F or die 'Can not close defaults file!';
	} else {
		#&message('E', 'Defaults do not exist!');
	}

	return %cfg;
}
